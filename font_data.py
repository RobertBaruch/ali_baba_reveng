import binascii

from absl import app


def show_char(data: bytes, ch: int) -> list[str]:
    pixel_data: list[str] = [""] * 16
    sprite_data: list[str] = [""] * 16
    data = data[ch * 32 : (ch + 1) * 32]
    for j in range(8):
        sprite_data[j] = f"{data[j]:08b}{data[j+8]:08b}"
    for j in range(8):
        sprite_data[j + 8] = f"{data[j+16]:08b}{data[j+24]:08b}"

    for n, line in enumerate(sprite_data):
        raw = f"{line[9:16]}{line[1:8]}"
        raw = raw[::-1]
        color_set = line[0]
        color01 = "O" if color_set == "1" else "G"
        color10 = "B" if color_set == "1" else "V"
        pixels = list("..............")
        for i in range(0, 14, 2):
            if raw[i : i + 2] == "01":
                pixels[i + 1] = color01
            elif raw[i : i + 2] == "10":
                pixels[i] = color10
        for i in range(13):
            if raw[i : i + 2] == "11":
                pixels[i : i + 2] = "WW"
        for i in range(12):
            if raw[i : i + 3] == "010":
                color = color10 if ((i + 1) % 2) == 0 else color01
                pixels[i + 1] = color
            elif raw[i : i + 3] == "101":
                color = color10 if ((i + 1) % 2) == 1 else color01
                pixels[i + 1] = color

        pixel_data[n] = "".join(pixels)
        # print(f"[[{data[n]:02X} {data[n+8]:02X}]] & ", end="")
        # print(f"[[{data[n]:08b} {data[n+8]:08b}]] & ", end="")
        # print(f"[[{color_set}]] & ", end="")
        # print(f"[[{raw}]] \\\\")

    # print("\\begin{center}")
    # print("\\scalebox{0.8}{")
    # print("\\begin{tabular}{@{}rcccccccccccccc@{}}")
    # for row in range(16):
    #     print(f"{row} ", end="")
    #     for col in range(14):
    #         pixel = pixel_data[row][col]
    #         if pixel == ".":
    #             print("& \\bk0 ", end="")
    #         elif pixel == "B":
    #             print("& \\bl0 ", end="")
    #         elif pixel == "O":
    #             print("& \\bo0 ", end="")
    #         elif pixel == "W":
    #             print("& \\bw0 ", end="")
    #         elif pixel == "G":
    #             print("& \\bg0 ", end="")
    #         elif pixel == "V":
    #             print("& \\bv0 ", end="")
    #     print("\\\\")
    # print("\\end{tabular}")
    # print("}")
    # print("\\end{center}")
    return pixel_data


def main(argv):
    # Data from $83A5 - $92A4.
    hdata

    data = binascii.unhexlify(hdata)
    pixel_data = []
    for i in range(120):
        pixel_data.append(show_char(data, i))

    for i in range(0, 120, 2):
        print("\\begin{center}")
        print("\\scalebox{0.8}{")
        print("\\begin{tabular}{@{}rcccccccccccccccccccccccccccccc@{}}")
        print(f" & \\multicolumn{{14}}{{c}}{{Character {i}}} & & \\multicolumn{{14}}{{c}}{{Character {i + 1}}} \\\\")
        for row in range(16):
            print(f"{row} ", end="")
            for sprite in range(i, i + 2):
                for col in range(14):
                    pixel = pixel_data[sprite][row][col]
                    if pixel == ".":
                        print("& \\Cbk ", end="")
                    elif pixel == "B":
                        print("& \\Cbl ", end="")
                    elif pixel == "O":
                        print("& \\Cbo ", end="")
                    elif pixel == "W":
                        print("& \\Cbw ", end="")
                    elif pixel == "G":
                        print("& \\Cbg ", end="")
                    elif pixel == "V":
                        print("& \\Cbv ", end="")
                print("& ", end="")
            print("\\\\")
        print("\\end{tabular}")
        print("}")
        print("\\end{center}")


if __name__ == "__main__":
    app.run(main)
