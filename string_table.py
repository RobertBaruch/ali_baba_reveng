"""Decodes string table."""

import binascii

from absl import app


def print_string(ptr: int, n: int, data: bytes) -> None:
    print(f"{ptr:04X} {n:02X}: {to_string(data)}")


def to_string(data: bytes) -> str:
    text = bytearray(data)
    for i, b in enumerate(text):
        text[i] = b & 0x7F
        if text[i] == 0x0D:
            text[i] = 0x0A
    return text.decode("utf8")


def from_pstr(data: bytes) -> str:
    length = data[0]
    return to_string(data[1 : 1 + length])


def print_multiline_table(ptr: int, hdata: str) -> None:
    data = binascii.unhexlify(hdata)
    n = 0

    # A string continues until a 0-length string is found. Each string is
    # length-data, and is one line.
    while data:
        length = data[0]
        if length == 0:
            print(f"{ptr:04X} {n:02X}: <empty>")
            data = data[1:]
            n += 1
            ptr += 1
            continue
        print_string(ptr, n, data[1 : 1 + length])
        data = data[1 + length :]
        ptr += 1 + length


def print_table(ptr: int, hdata: str) -> None:
    data = binascii.unhexlify(hdata)
    n = 0

    while data:
        length = data[0]
        if length == 0:
            print(f"{ptr:04X} {n:02X}: <empty>")
        else:
            print_string(ptr, n, data[1 : 1 + length])
        data = data[1 + length :]
        ptr += 1 + length
        n += 1


def mob_link_str(mob_link: int) -> str:
    if mob_link == 0:
        return "--"
    return f"{mob_link-1:02X}"


def spc_to_font(spc: int) -> int:
    y, a = divmod(spc, 21)
    a += 1
    if a >= 5 or y == 0:
        return a
    return a + 32


def print_mob_stats(mob_names_ptr: int, mob_names_hdata: str) -> None:
    ptr = 0x4C80
    hdata
    data = binascii.unhexlify(hdata)
    mob_names_data = binascii.unhexlify(mob_names_hdata)
    n = 0

    while data:
        mob_data = data[:16]
        data = data[16:]
        name_ptr = int.from_bytes(mob_data[:2], "little")
        rel_offset = name_ptr - mob_names_ptr
        name = from_pstr(mob_names_data[rel_offset:])
        # SPC is used for the mob's sprite index: 0-21 = 0-21
        print(
            f"{ptr:04X} {n:02X}:"
            f" MOB {mob_link_str(mob_data[2])}"
            f" POS {pos_to_col_row(mob_data[3])}"
            f" SPC {mob_data[4]:02X} ({spc_to_font(mob_data[4]):02X})"
            f" STR {mob_data[5]:02X}"
            f" CON {mob_data[6]:02X}"
            f" MEL {mob_data[7]+1:02X}"
            f" [8] {mob_data[8]:02X}"
            f" HTH {mob_data[9]+1:02X}"
            f" [A] {mob_data[10]:02X}"
            f" DEX {mob_data[11]+1:02X}"
            f" SPD {mob_data[12]:02X}"
            f" [D] {mob_data[13]:02X}"
            f" [E] {mob_data[14]:02X}"
            f" [F] {mob_data[15]:02X}"
            f" {name}"
        )
        n += 1
        ptr += 16

def pos_to_col_row(pos: int) -> str:
    col, row = divmod(pos, 20)
    return f"{col:02d},{row:02d}"

def print_room_stats(room_names_ptr: int, room_names_hdata: str) -> None:
    ptr = 0x4009
    hdata
    data = binascii.unhexlify(hdata)
    room_names_data = binascii.unhexlify(room_names_hdata)
    n = 0

    while len(data) >= 9:
        room_data = data[:9]
        data = data[9:]
        name_ptr = int.from_bytes(room_data[:2], "little")
        rel_offset = name_ptr - room_names_ptr
        name = from_pstr(room_names_data[rel_offset:])
        print(
            f"{ptr:04X} {n:02X}:"
            f" MOB {mob_link_str(room_data[2])}"
            f" TL {pos_to_col_row(room_data[3])}"
            f" BR {pos_to_col_row(room_data[4])}"
            f" [5] {room_data[5]:02X}"
            f" DAT {int.from_bytes(room_data[6:8], "little"):04X}"
            f" [8] {room_data[8]:02X}"
            f" {name}"
        )
        n += 1
        ptr += 9


def main(argv: list[str]) -> None:
    if len(argv) > 1:
        raise app.UsageError("Too many command-line arguments.")

    print("===== Messages at 9AA6 ====================================")
    ptr = 0x9AA6
    hdata = (
        "0021D4C8C5A0C4CFCFD2A0C3D2C5C1CBD3A0C2D5D4A0D2C5CDC1C9CED3A0D3C8"
        "D5D4AE0015D4C8C5A0C4CFCFD2A0D3D7C9CEC7D3A0CFD0C5CEA10014C9CED3C5"
        "D2D4A0C1CCC9A0C2C1C2C1A0C4C9D3CB0014C8C1C8A1A0CAD5D3D4A0C1A0D3C3"
        "D2C1D4C3C8A10005CFD5C3C8A10007C1C1C1D2C7C8A1000BC1C9C9D9C5C5C5C5"
        "C5A1A1001CCFC8A0CDC1ACA0C9A0D4C8C9CECBA0C9D4A7D3A0CDD9A0D4C9CDC5"
        "AE001FC6C1CCCCD3A0D5CEC3CFCED3C3C9CFD5D3A0D4CFA0D4C8C5A0C6CCCFCF"

    )
    print_multiline_table(ptr, hdata)
    print("===== Room names at 4240 ====================================")
    ptr = 0x4240
    room_names_hdata
    print_table(ptr, room_names_hdata)
    print("===== Messages at 7BDB ====================================")
    ptr = 0x7BDB
    hdata
    print_table(ptr, hdata)
    print("===== Mob names at 5480 ====================================")
    ptr = 0x5480
    mob_names_hdata
    print_table(ptr, mob_names_hdata)

    print("===== Leftover source code from uninitialized data at 59C9 =========")
    ptr = 0x59C9
    hdata
    print_string(ptr, 0, binascii.unhexlify(hdata))

    print("===== Mob data ====================================")
    print_mob_stats(0x5480, mob_names_hdata)

    print("===== Room data ====================================")
    print_room_stats(0x4240, room_names_hdata)


if __name__ == "__main__":
    app.run(main)
